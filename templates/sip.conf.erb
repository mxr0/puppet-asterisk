;
; SIP Configuration example for Asterisk
;
; SIP dial strings
;-----------------------------------------------------------
; In the dialplan (extensions.conf) you can use several 
; syntaxes for dialing SIP devices.
;        SIP/devicename
;        SIP/username@domain   (SIP uri)
;        SIP/username[:password[:md5secret[:authname[:transport]]]]@host[:port]
;        SIP/devicename/extension
;
;
; Devicename
;        devicename is defined as a peer in a section below.
;
; username@domain
;        Call any SIP user on the Internet
;        (Don't forget to enable DNS SRV records if you want to use this)
; 
; devicename/extension
;        If you define a SIP proxy as a peer below, you may call
;        SIP/proxyhostname/user or SIP/user@proxyhostname 
;        where the proxyhostname is defined in a section below 
;        This syntax also works with ATA's with FXO ports
;
; SIP/username[:password[:md5secret[:authname]]]@host[:port]
;        This form allows you to specify password or md5secret and authname
;        without altering any authentication data in config.
;        Examples:
;
;        SIP/*98@mysipproxy
;        SIP/sales:topsecret::account02@domain.com:5062
;        SIP/12345678::bc53f0ba8ceb1ded2b70e05c3f91de4f:myname@192.168.0.1
;
; All of these dial strings specify the SIP request URI.
; In addition, you can specify a specific To: header by adding an
; exclamation mark after the dial string, like
;
;         SIP/sales@mysipproxy!sales@edvina.net
;
; CLI Commands
; -------------------------------------------------------------
; Useful CLI commands to check peers/users:
;   sip show peers               Show all SIP peers (including friends)
;   sip show registry            Show status of hosts we register with
;
;   sip set debug on             Show all SIP messages
;
;   module reload chan_sip.so    Reload configuration file
;
;------- Naming devices ------------------------------------------------------
;
; When naming devices, make sure you understand how Asterisk matches calls
; that come in.
;	1. Asterisk checks the SIP From: address username and matches against
;	   names of devices with type=user 
;	   The name is the text between square brackets [name]
;	2. Asterisk checks the From: addres and matches the list of devices
;	   with a type=peer
;	3. Asterisk checks the IP address (and port number) that the INVITE
;	   was sent from and matches against any devices with type=peer
;
; Don't mix extensions with the names of the devices. Devices need a unique
; name. The device name is *not* used as phone numbers. Phone numbers are
; anything you declare as an extension in the dialplan (extensions.conf).
; 
; When setting up trunks, make sure there's no risk that any From: username
; (caller ID) will match any of your device names, because then Asterisk 
; might match the wrong device.
;
; Note: The parameter "username" is not the username and in most cases is
;       not needed at all. Check below. In later releases, it's renamed
;       to "defaultuser" which is a better name, since it is used in 
;       combination with the "defaultip" setting.
;-----------------------------------------------------------------------------

; ** Deprecated configuration options **
; The "call-limit" configuation option is deprecated. It still works in
; this version of Asterisk, but will disappear in the next version.
; You are encouraged to use the dialplan groupcount functionality
; to enforce call limits instead of using this channel-specific method.
;
; You can still set limits per device in sip.conf or in a database by using 
; "setvar" to set variables that can be used in the dialplan for various limits.

[general]
<% if @sip_options.has_key?("context") -%>
context=<%= @sip_options["context"] -%>                 ; Default context for incoming calls
<% end -%>
<% if @sip_options.has_key?("allowguest") -%>
allowguest=<%= @sip_options["allowguest"] -%>              ; Allow or reject guest calls (default is yes)
<% end -%>
<% if @sip_options.has_key?("match_auth_username") -%>
match_auth_username=<%= @sip_options["match_auth_username"] -%>        ; if available, match user entry using the
                                ; 'username' field from the authentication line
                                ; instead of the From: field.
<% end -%>
<% if @sip_options.has_key?("allowoverlap") -%>
allowoverlap=<%= @sip_options["allowoverlap"] -%>                 ; Disable overlap dialing support. (Default is yes)
<% end -%>
<% if @sip_options.has_key?("allowtransfer") -%>
allowtransfer=<%= @sip_options["allowtransfer"] -%>               ; Disable all transfers (unless enabled in peers or users)
                                ; Default is enabled. The Dial() options 't' and 'T' are not
                                ; related as to whether SIP transfers are allowed or not.
<% end -%>
<% if @sip_options.has_key?("realm") -%>
realm=<%= @sip_options["realm"] -%>             ; Realm for digest authentication
                                ; defaults to "asterisk". If you set a system name in
                                ; asterisk.conf, it defaults to that system name
                                ; Realms MUST be globally unique according to RFC 3261
                                ; Set this to your host name or domain name
<% end -%>
<% if @sip_options.has_key?("udpbindaddr") -%>
udpbindaddr=<%= @sip_options["udpbindaddr"] -%>             ; IP address to bind UDP listen socket to (0.0.0.0 binds to all)
                                ; Optionally add a port number, 192.168.1.1:5062 (default is port 5060)
<% end -%>
<% if @sip_options.has_key?("tcpenable") -%>
;
; Note that the TCP and TLS support for chan_sip is currently considered
; experimental.  Since it is new, all of the related configuration options are
; subject to change in any release.  If they are changed, the changes will
; be reflected in this sample configuration file, as well as in the UPGRADE.txt file.
;
tcpenable=<%= @sip_options["tcpenable"] -%>                    ; Enable server for incoming TCP connections (default is no)
<% end -%>
<% if @sip_options.has_key?("tcpbindaddr") -%>
tcpbindaddr=<%= @sip_options["tcpbindaddr"] -%>             ; IP address for TCP server to bind to (0.0.0.0 binds to all interfaces)
                                ; Optionally add a port number, 192.168.1.1:5062 (default is port 5060)
<% end -%>
<% if @sip_options.has_key?("tlsenable") -%>
tlsenable=<%= @sip_options["tlsenable"] -%>                   ; Enable server for incoming TLS (secure) connections (default is no)
<% end -%>
<% if @sip_options.has_key?("tlsbindaddr") -%>
tlsbindaddr=<%= @sip_options["tlsbindaddr"] -%>            ; IP address for TLS server to bind to (0.0.0.0) binds to all interfaces)
                                ; Optionally add a port number, 192.168.1.1:5063 (default is port 5061)
                                ; Remember that the IP address must match the common name (hostname) in the
                                ; certificate, so you don't want to bind a TLS socket to multiple IP addresses.
                                ; For details how to construct a certificate for SIP see 
                                ; http://tools.ietf.org/html/draft-ietf-sip-domain-certs
<% end -%>
<% if @sip_options.has_key?("tlscertfile") -%>
tlscertfile=<%= @sip_options["tlscertfile"] -%>       ; Certificate file (*.pem only) to use for TLS connections 
                                ; default is to look for "asterisk.pem" in current directory
<% end -%>
<% if @sip_options.has_key?("tlscafile") -%>
tlscafile=<%= @sip_options["tlscafile"] -%>
;        If the server your connecting to uses a self signed certificate
;        you should have their certificate installed here so the code can 
;        verify the authenticity of their certificate.
<% end -%>
<% if @sip_options.has_key?("tlscadir") -%>
tlscadir=<%= @sip_options["tlscadir"] -%>
;        A directory full of CA certificates.  The files must be named with 
;        the CA subject name hash value. 
;        (see man SSL_CTX_load_verify_locations for more info) 
<% end -%>
<% if @sip_options.has_key?("tlsdontverifyserver") -%>
tlsdontverifyserver=<%= @sip_options["tlsdontverifyserver"] -%>
;        If set to yes, don't verify the servers certificate when acting as 
;        a client.  If you don't have the server's CA certificate you can
;        set this and it will connect without requiring tlscafile to be set.
;        Default is no.
<% end -%>
<% if @sip_options.has_key?("tlscipher") -%>
tlscipher=<%= @sip_options["tlscipher"] -%>
;        A string specifying which SSL ciphers to use or not use
;        A list of valid SSL cipher strings can be found at: 
;                http://www.openssl.org/docs/apps/ciphers.html#CIPHER_STRINGS
<% end -%>
<% if @sip_options.has_key?("tcpauthtimeout") -%>
tcpauthtimeout=<%= @sip_options["tcpauthtimeout"] -%>            ; tcpauthtimeout specifies the maximum number
				; of seconds a client has to authenticate.  If
				; the client does not authenticate beofre this
				; timeout expires, the client will be
                                ; disconnected. (default: 30 seconds)
<% end -%>
<% if @sip_options.has_key?("tcpauthlimit") -%>
tcpauthlimit=<%= @sip_options["tcpauthlimit"] -%>             ; tcpauthlimit specifies the maximum number of
				; unauthenticated sessions that will be allowed
                                ; to connect at any given time. (default: 100)
<% end -%>
<% if @sip_options.has_key?("srvlookup") -%>
srvlookup=<%= @sip_options["srvlookup"] -%>                   ; Enable DNS SRV lookups on outbound calls
                                ; Note: Asterisk only uses the first host 
                                ; in SRV records
                                ; Disabling DNS SRV lookups disables the 
                                ; ability to place SIP calls based on domain 
                                ; names to some other SIP users on the Internet
                                ; Specifying a port in a SIP peer definition or
                                ; when dialing outbound calls will supress SRV
                                ; lookups for that peer or call.
<% end -%>
<% if @sip_options.has_key?("pedantic") -%>
pedantic=<%= @sip_options["pedantic"] -%>                   ; Enable checking of tags in headers, 
                                ; international character conversions in URIs
                                ; and multiline formatted headers for strict
                                ; SIP compatibility (defaults to "no")
<% end -%>
<% if @sip_options.has_key?("tos_sip") -%>
; See qos.tex or Quality of Service section of asterisk.pdf for a description of these parameters.
tos_sip=<%= @sip_options["tos_sip"] -%>                    ; Sets TOS for SIP packets.
<% end -%>
<% if @sip_options.has_key?("tos_audio") -%>
tos_audio=<%= @sip_options["tos_audio"] -%>                   ; Sets TOS for RTP audio packets.
<% end -%>
<% if @sip_options.has_key?("tos_video") -%>
tos_video=<%= @sip_options["tos_video"] -%>                 ; Sets TOS for RTP video packets.
<% end -%>
<% if @sip_options.has_key?("tos_text") -%>
tos_text=<%= @sip_options["tos_text"] -%>                  ; Sets TOS for RTP text packets.
<% end -%>
<% if @sip_options.has_key?("cos_sip") -%>
cos_sip=<%= @sip_options["cos_sip"] -%>                      ; Sets 802.1p priority for SIP packets.
<% end -%>
<% if @sip_options.has_key?("cos_audio") -%>
cos_audio=<%= @sip_options["cos_audio"] -%>                    ; Sets 802.1p priority for RTP audio packets.
<% end -%>
<% if @sip_options.has_key?("cos_video") -%>
cos_video=<%= @sip_options["cos_video"] -%>                    ; Sets 802.1p priority for RTP video packets.
<% end -%>
<% if @sip_options.has_key?("cos_text") -%>
cos_text=<%= @sip_options["cos_text"] -%>                     ; Sets 802.1p priority for RTP text packets.
<% end -%>
<% if @sip_options.has_key?("maxexpiry") -%>
maxexpiry=<%= @sip_options["maxexpiry"] -%>                 ; Maximum allowed time of incoming registrations
                                ; and subscriptions (seconds)
<% end -%>
<% if @sip_options.has_key?("minexpiry") -%>
minexpiry=<%= @sip_options["minexpiry"] -%>                   ; Minimum length of registrations/subscriptions (default 60)
<% end -%>
<% if @sip_options.has_key?("defaultexpiry") -%>
defaultexpiry=<%= @sip_options["defaultexpiry"] -%>              ; Default length of incoming/outgoing registration
<% end -%>
<% if @sip_options.has_key?("mwiexpiry") -%>
mwiexpiry=<%= @sip_options["mwiexpiry"] -%>                 ; Expiry time for outgoing MWI subscriptions
<% end -%>
<% if @sip_options.has_key?("qualifyfreq") -%>
qualifyfreq=<%= @sip_options["qualifyfreq"] -%>                 ; Qualification: How often to check for the 
                                ; host to be up in seconds
                                ; Set to low value if you use low timeout for
                                ; NAT of UDP sessions
<% end -%>
<% if @sip_options.has_key?("qualifygap") -%>
qualifygap=<%= @sip_options["qualifygap"] -%>			; Number of milliseconds between each group of peers being qualified
<% end -%>
<% if @sip_options.has_key?("qualifypeers") -%>
qualifypeers=<%= @sip_options["qualifypeers"] -%>			; Number of peers in a group to be qualified at the same time
<% end -%>
<% if @sip_options.has_key?("notifymimetype") -%>
notifymimetype=<%= @sip_options["notifymimetype"] -%>      ; Allow overriding of mime type in MWI NOTIFY
<% end -%>
<% if @sip_options.has_key?("buggymwi") -%>
buggymwi=<%= @sip_options["buggymwi"] -%>                    ; Cisco SIP firmware doesn't support the MWI RFC
                                ; fully. Enable this option to not get error messages
                                ; when sending MWI to phones with this bug.
<% end -%>
<% if @sip_options.has_key?("vmexten") -%>
vmexten=<%= @sip_options["vmexten"] -%>              ; dialplan extension to reach mailbox sets the 
                                ; Message-Account in the MWI notify message 
                                ; defaults to "asterisk"
<% end -%>
<% if @sip_options.has_key?("disallow") -%>
<%   @sip_options["disallow"].each do |x| -%>
disallow=<%= x %>
<%   end -%>
<% end -%>
<% if @sip_options.has_key?("allow") -%>
<%-  @sip_options["allow"].each do |x| -%>
allow=<%= x %>
<%   end -%>
<% end -%>
<% if @sip_options.has_key?("mohinterpret") -%>
; This option specifies a preference for which music on hold class this channel
; should listen to when put on hold if the music class has not been set on the
; channel with Set(CHANNEL(musicclass)=whatever) in the dialplan, and the peer
; channel putting this one on hold did not suggest a music class.
;
; This option may be specified globally, or on a per-user or per-peer basis.
;
mohinterpret=<%= @sip_options["mohinterpret"] -%>
<% end -%>
<% if @sip_options.has_key?("mohsuggest") -%>
;
; This option specifies which music on hold class to suggest to the peer channel
; when this channel places the peer on hold. It may be specified globally or on
; a per-user or per-peer basis.
;
mohsuggest=<%= @sip_options["mohsuggest"] -%>
<% end -%>
<% if @sip_options.has_key?("parkinglot") -%>
parkinglot=<%= @sip_options["parkinglot"] -%>               ; Sets the default parking lot for call parking
                                ; This may also be set for individual users/peers
                                ; Parkinglots are configured in features.conf
<% end -%>
<% if @sip_options.has_key?("language") -%>
language=<%= @sip_options["language"] -%>                    ; Default language setting for all users/peers
                                ; This may also be set for individual users/peers
<% end -%>
<% if @sip_options.has_key?("relaxdtmf") -%>
relaxdtmf=<%= @sip_options["relaxdtmf"] -%>                  ; Relax dtmf handling
<% end -%>
<% if @sip_options.has_key?("trustrpid") -%>
trustrpid=<%= @sip_options["trustrpid"] -%>                 ; If Remote-Party-ID should be trusted
<% end -%>
<% if @sip_options.has_key?("sendrpid") -%>
sendrpid=<%= @sip_options["sendrpid"] -%>                 ; If Remote-Party-ID should be sent
<% end -%>
<% if @sip_options.has_key?("prematuremedia") -%>
prematuremedia=<%= @sip_options["prematuremedia"] -%>		; Some ISDN links send empty media frames before 
				; the call is in ringing or progress state. The SIP 
				; channel will then send 183 indicating early media
				; which will be empty - thus users get no ring signal.
				; Setting this to "no" will stop any media before we have
				; call progress. Default is "yes".
<% end -%>
<% if @sip_options.has_key?("progressinband") -%>
progressinband=<%= @sip_options["progressinband"] -%>           ; If we should generate in-band ringing always
                                ; use 'never' to never use in-band signalling, even in cases
                                ; where some buggy devices might not render it
                                ; Valid values: yes, no, never Default: never
<% end -%>
<% if @sip_options.has_key?("useragent") -%>
useragent=<%= @sip_options["useragent"] -%>         ; Allows you to change the user agent string
                                ; The default user agent string also contains the Asterisk
                                ; version. If you don't want to expose this, change the
                                ; useragent string.
<% end -%>
<% if @sip_options.has_key?("sdpsession") -%>
sdpsession=<%= @sip_options["sdpsession"] -%>        ; Allows you to change the SDP session name string, (s=)
                                ; Like the useragent parameter, the default user agent string
                                ; also contains the Asterisk version.
<% end -%>
<% if @sip_options.has_key?("sdpowner") -%>
sdpowner=<%= @sip_options["sdpowner"] -%>                  ; Allows you to change the username field in the SDP owner string, (o=)
                                ; This field MUST NOT contain spaces
<% end -%>
<% if @sip_options.has_key?("promiscredir") -%>
promiscredir=<%= @sip_options["promiscredir"] -%>              ; If yes, allows 302 or REDIR to non-local SIP address
                                ; Note that promiscredir when redirects are made to the
                                ; local system will cause loops since Asterisk is incapable
                                ; of performing a "hairpin" call.
<% end -%>
<% if @sip_options.has_key?("usereqphone") -%>
usereqphone=<%= @sip_options["usereqphone"] -%>               ; If yes, ";user=phone" is added to uri that contains
                                ; a valid phone number
<% end -%>
<% if @sip_options.has_key?("dtmfmode") -%>
dtmfmode=<%= @sip_options["dtmfmode"] -%>             ; Set default dtmfmode for sending DTMF. Default: rfc2833
                                ; Other options: 
                                ; info : SIP INFO messages (application/dtmf-relay)
                                ; shortinfo : SIP INFO messages (application/dtmf)
                                ; inband : Inband audio (requires 64 kbit codec -alaw, ulaw)
                                ; auto : Use rfc2833 if offered, inband otherwise
<% end -%>
<% if @sip_options.has_key?("compactheaders") -%>
compactheaders=<%= @sip_options["compactheaders"] -%>           ; send compact sip headers.
<% end -%>
<% if @sip_options.has_key?("videosupport") -%>
videosupport=<%= @sip_options["videosupport"] -%>               ; Turn on support for SIP video. You need to turn this
                                ; on in this section to get any video support at all.
                                ; You can turn it off on a per peer basis if the general
                                ; video support is enabled, but you can't enable it for
                                ; one peer only without enabling in the general section.
                                ; If you set videosupport to "always", then RTP ports will
                                ; always be set up for video, even on clients that don't
                                ; support it.  This assists callfile-derived calls and
                                ; certain transferred calls to use always use video when
                                ; available. [yes|NO|always]
<% end -%>
<% if @sip_options.has_key?("maxcallbitrate") -%>
maxcallbitrate=<%= @sip_options["maxcallbitrate"] -%>             ; Maximum bitrate for video calls (default 384 kb/s)
                                ; Videosupport and maxcallbitrate is settable
                                ; for peers and users as well
<% end -%>
<% if @sip_options.has_key?("callevents") -%>
callevents=<%= @sip_options["callevents"] -%>                  ; generate manager events when sip ua 
                                ; performs events (e.g. hold)
<% end -%>
<% if @sip_options.has_key?("authfailureevents") -%>
authfailureevents=<%= @sip_options["authfailureevents"] -%>           ; generate manager "peerstatus" events when peer can't
                                ; authenticate with Asterisk. Peerstatus will be "rejected".
<% end -%>
<% if @sip_options.has_key?("alwaysauthreject") -%>
alwaysauthreject=<%= @sip_options["alwaysauthreject"] -%>         ; When an incoming INVITE or REGISTER is to be rejected,
                                ; for any reason, always reject with an identical response
                                ; equivalent to valid username and invalid password/hash
                                ; instead of letting the requester know whether there was
                                ; a matching user or peer for their request.  This reduces
                                ; the ability of an attacker to scan for valid SIP usernames.
<% end -%>
<% if @sip_options.has_key?("g726nonstandard") -%>
g726nonstandard=<%= @sip_options["g726nonstandard"] -%>          ; If the peer negotiates G726-32 audio, use AAL2 packing
                                ; order instead of RFC3551 packing order (this is required
                                ; for Sipura and Grandstream ATAs, among others). This is
                                ; contrary to the RFC3551 specification, the peer _should_
                                ; be negotiating AAL2-G726-32 instead :-(
<% end -%>
<% if @sip_options.has_key?("outboundproxy") -%>
;outboundproxy=proxy.provider.domain            ; send outbound signaling to this proxy, not directly to the devices
;outboundproxy=proxy.provider.domain:8080       ; send outbound signaling to this proxy, not directly to the devices
;outboundproxy=proxy.provider.domain,force      ; Send ALL outbound signalling to proxy, ignoring route: headers
;outboundproxy=tls://proxy.provider.domain      ; same as '=proxy.provider.domain' except we try to connect with tls 
;                                               ; (could also be tcp,udp) - defining transports on the proxy line only
;                                               ; applies for the global proxy, otherwise use the transport= option
outboundproxy=<%= @sip_options["outboundproxy"] -%>
<% end -%>
<% if @sip_options.has_key?("transport") -%>
transport=<%= @sip_options["transport"] -%>
<% end -%>
<% if @sip_options.has_key?("matchexterniplocally") -%>
matchexterniplocally=<%= @sip_options["matchexterniplocally"] -%>     ; Only substitute the externip or externhost setting if it matches
                                ; your localnet setting. Unless you have some sort of strange network
                                ; setup you will not need to enable this.
<% end -%>
<% if @sip_options.has_key?("dynamic_exclude_static") -%>
dynamic_exclude_static=<%= @sip_options["dynamic_exclude_static"] -%>   ; Disallow all dynamic hosts from registering
                                ; as any IP address used for staticly defined
                                ; hosts.  This helps avoid the configuration
                                ; error of allowing your users to register at
                                ; the same address as a SIP provider.
<% end -%>
<% if @sip_options.has_key?("contactdeny") -%>
contactdeny=<%= @sip_options["contactdeny"] -%>           ; Use contactpermit and contactdeny to
<% end -%>
<% if @sip_options.has_key?("contactpermit") -%>
contactpermit=<%= @sip_options["contactpermit"] -%>  ; restrict at what IPs your users may
                                       ; register their phones.
<% end -%>
<% if @sip_options.has_key?("shrinkcallerid") -%>
; The shrinkcallerid function removes '(', ' ', ')', non-trailing '.', and '-' not
; in square brackets.  For example, the caller id value 555.5555 becomes 5555555
; when this option is enabled.  Disabling this option results in no modification
; of the caller id value, which is necessary when the caller id represents something
; that must be preserved.  This option can only be used in the [general] section.
; By default this option is on.
;
shrinkcallerid=<%= @sip_options["shrinkcallerid"] -%>     ; on by default
<% end -%>
<% if @sip_options.has_key?("regcontext") -%>
;
; If regcontext is specified, Asterisk will dynamically create and destroy a
; NoOp priority 1 extension for a given peer who registers or unregisters with
; us and have a "regexten=" configuration item.  
; Multiple contexts may be specified by separating them with '&'. The 
; actual extension is the 'regexten' parameter of the registering peer or its
; name if 'regexten' is not provided.  If more than one context is provided,
; the context must be specified within regexten by appending the desired
; context after '@'.  More than one regexten may be supplied if they are 
; separated by '&'.  Patterns may be used in regexten.
;
regcontext=<%= @sip_options["regcontext"] -%>
<% end -%>
<% if @sip_options.has_key?("regextenonqualify") -%>
regextenonqualify=<%= @sip_options["regextenonqualify"] -%>          ; Default "no"
                                ; If you have qualify on and the peer becomes unreachable
                                ; this setting will enforce inactivation of the regexten
                                ; extension for the peer
;
<% end -%>

<% if @sip_options.has_key?("t1min") -%>
;--------------------------- SIP timers ----------------------------------------------------
; These timers are used primarily in INVITE transactions. 
; The default for Timer T1 is 500 ms or the measured run-trip time between
; Asterisk and the device if you have qualify=yes for the device.
;
t1min=<%= @sip_options["t1min"] -%>                      ; Minimum roundtrip time for messages to monitored hosts
                                ; Defaults to 100 ms
<% end -%>
<% if @sip_options.has_key?("timert1") -%>
timert1=<%= @sip_options["timert1"] -%>                    ; Default T1 timer
                                ; Defaults to 500 ms or the measured round-trip
                                ; time to a peer (qualify=yes).
<% end -%>
<% if @sip_options.has_key?("timerb") -%>
timerb=<%= @sip_options["timerb"] -%>                   ; Call setup timer. If a provisional response is not received
                                ; in this amount of time, the call will autocongest
                                ; Defaults to 64*timert1
<% end -%>

<% if @sip_options.has_key?("rtptimeout") or @sip_options.has_key?("rtpholdtimeout") or @sip_options.has_key?("rtpkeepalive") -%>
;--------------------------- RTP timers ----------------------------------------------------
; These timers are currently used for both audio and video streams. The RTP timeouts
; are only applied to the audio channel.
; The settings are settable in the global section as well as per device
;
<% end -%>
<% if @sip_options.has_key?("rtptimeout") -%>
rtptimeout=<%= @sip_options["rtptimeout"] -%>                  ; Terminate call if 60 seconds of no RTP or RTCP activity
                                ; on the audio channel
                                ; when we're not on hold. This is to be able to hangup
                                ; a call in the case of a phone disappearing from the net,
                                ; like a powerloss or grandma tripping over a cable.
<% end -%>
<% if @sip_options.has_key?("rtpholdtimeout") -%>
rtpholdtimeout=<%= @sip_options["rtpholdtimeout"] -%>             ; Terminate call if 300 seconds of no RTP or RTCP activity
                                ; on the audio channel
                                ; when we're on hold (must be > rtptimeout)
<% end -%>
<% if @sip_options.has_key?("rtpkeepalive") -%>
rtpkeepalive=<%= @sip_options["rtpkeepalive"] -%>            ; Send keepalives in the RTP stream to keep NAT open
                                ; (default is off - zero)
<% end -%>

<% if @sip_options.has_key?("session-timers") -%>
;--------------------------- SIP Session-Timers (RFC 4028)------------------------------------
; SIP Session-Timers provide an end-to-end keep-alive mechanism for active SIP sessions.
; This mechanism can detect and reclaim SIP channels that do not terminate through normal
; signaling procedures. Session-Timers can be configured globally or at a user/peer level.
; The operation of Session-Timers is driven by the following configuration parameters:
;
; * session-timers    - Session-Timers feature operates in the following three modes:
;                            originate : Request and run session-timers always
;                            accept    : Run session-timers only when requested by other UA
;                            refuse    : Do not run session timers in any case
;                       The default mode of operation is 'accept'.
; * session-expires   - Maximum session refresh interval in seconds. Defaults to 1800 secs.
; * session-minse     - Minimum session refresh interval in seconds. Defualts to 90 secs.
; * session-refresher - The session refresher (uac|uas). Defaults to 'uas'.
;
session-timers=<%= @sip_options["session-timers"] -%>
<% end -%>
<% if @sip_options.has_key?("session-expires") -%>
session-expires=<%= @sip_options["session-expires"] -%>
<% end -%>
<% if @sip_options.has_key?("session-minse") -%>
session-minse=<%= @sip_options["session-minse"] -%>
<% end -%>
<% if @sip_options.has_key?("session-refresher") -%>
session-refresher=<%= @sip_options["session-refresher"] -%>
<% end -%>

<% if @sip_options.has_key?("hash_users") -%>
;--------------------------- HASH TABLE SIZES ------------------------------------------------
; For maximum efficiency, adjust the following
; values to be slightly larger than the maximum number of in-memory objects (devices).
; Too large, and space is wasted. Too small, and things will run slower.
; 563 is probably way too big for small (home) applications, but it
; should cover most small/medium sites.
; It is recommended to make the sizes be a prime number!
; This was internally set to 17 for small-memory applications...
; All tables default to 563, except when compiled in LOW_MEMORY mode,
; in which case, they default to 17. You can override this by uncommenting
; the following, and changing the values.
hash_users=<%= @sip_options["hash_users"] -%>
<% end -%>
<% if @sip_options.has_key?("hash_peers") -%>
hash_peers=<%= @sip_options["hash_peers"] -%>
<% end -%>
<% if @sip_options.has_key?("hash_dialogs") -%>
hash_dialogs=<%= @sip_options["hash_dialogs"] -%>
<% end -%>

<% if @sip_options.has_key?("sipdebug") -%>
;--------------------------- SIP DEBUGGING ---------------------------------------------------
sipdebug=<%= @sip_options["sipdebug"] -%>                 ; Turn on SIP debugging by default, from
                                ; the moment the channel loads this configuration
<% end -%>
<% if @sip_options.has_key?("recordhistory") -%>
recordhistory=<%= @sip_options["recordhistory"] -%>              ; Record SIP history by default 
                                ; (see sip history / sip no history)
<% end -%>
<% if @sip_options.has_key?("dumphistory") -%>
dumphistory=<%= @sip_options["dumphistory"] -%>                ; Dump SIP history at end of SIP dialogue
                                ; SIP history is output to the DEBUG logging channel
<% end -%>

<% if @sip_options.has_key?("allowsubscribe") -%>
;--------------------------- STATUS NOTIFICATIONS (SUBSCRIPTIONS) ----------------------------
; You can subscribe to the status of extensions with a "hint" priority
; (See extensions.conf.sample for examples)
; chan_sip support two major formats for notifications: dialog-info and SIMPLE 
;
; You will get more detailed reports (busy etc) if you have a call counter enabled
; for a device. 
;
; If you set the busylevel, we will indicate busy when we have a number of calls that 
; matches the busylevel treshold.
;
; For queues, you will need this level of detail in status reporting, regardless
; if you use SIP subscriptions. Queues and manager use the same internal interface
; for reading status information.
;
; Note: Subscriptions does not work if you have a realtime dialplan and use the
; realtime switch.
;
allowsubscribe=<%= @sip_options["allowsubscribe"] -%>              ; Disable support for subscriptions. (Default is yes)
<% end -%>
<% if @sip_options.has_key?("subscribecontext") -%>
subscribecontext=<%= @sip_options["subscribecontext"] -%>     ; Set a specific context for SUBSCRIBE requests
                                ; Useful to limit subscriptions to local extensions
                                ; Settable per peer/user also
<% end -%>
<% if @sip_options.has_key?("notifyringing") -%>
notifyringing=<%= @sip_options["notifyringing"] -%>             ; Control whether subscriptions already INUSE get sent
                                ; RINGING when another call is sent (default: yes)
<% end -%>
<% if @sip_options.has_key?("notifyhold") -%>
notifyhold=<%= @sip_options["notifyhold"] -%>               ; Notify subscriptions on HOLD state (default: no)
                                ; Turning on notifyringing and notifyhold will add a lot
                                ; more database transactions if you are using realtime.
<% end -%>
<% if @sip_options.has_key?("notifycid") -%>
notifycid=<%= @sip_options["notifycid"] -%>                ; Control whether caller ID information is sent along with
                                ; dialog-info+xml notifications (supported by snom phones).
                                ; Note that this feature will only work properly when the
                                ; incoming call is using the same extension and context that
                                ; is being used as the hint for the called extension.  This means
                                ; that it won't work when using subscribecontext for your sip
                                ; user or peer (if subscribecontext is different than context).
                                ; This is also limited to a single caller, meaning that if an
                                ; extension is ringing because multiple calls are incoming,
                                ; only one will be used as the source of caller ID.  Specify
                                ; 'ignore-context' to ignore the called context when looking
                                ; for the caller's channel.  The default value is 'no.' Setting
                                ; notifycid to 'ignore-context' also causes call-pickups attempted
                                ; via SNOM's NOTIFY mechanism to set the context for the call pickup
                                ; to PICKUPMARK.
<% end -%>
<% if @sip_options.has_key?("callcounter") -%>
callcounter=<%= @sip_options["callcounter"] -%>              ; Enable call counters on devices. This can be set per
                                ; device too.
<% end -%>

<% if @sip_options.has_key?("t38pt_udptl") -%>
;----------------------------------------- T.38 FAX SUPPORT ----------------------------------
;
; This setting is available in the [general] section as well as in device configurations.
; Setting this to yes enables T.38 FAX (UDPTL) on SIP calls; it defaults to off.
;
; t38pt_udptl=yes            ; Enables T.38 with FEC error correction.
; t38pt_udptl=yes,fec        ; Enables T.38 with FEC error correction.
; t38pt_udptl=yes,redundancy ; Enables T.38 with redundancy error correction.
; t38pt_udptl=yes,none       ; Enables T.38 with no error correction.
;
; In some cases, T.38 endpoints will provide a T38FaxMaxDatagram value (during T.38 setup) that
; is based on an incorrect interpretation of the T.38 recommendation, and results in failures
; because Asterisk does not believe it can send T.38 packets of a reasonable size to that
; endpoint (Cisco media gateways are one example of this situation). In these cases, during a
; T.38 call you will see warning messages on the console/in the logs from the Asterisk UDPTL
; stack complaining about lack of buffer space to send T.38 FAX packets. If this occurs, you
; can set an override (globally, or on a per-device basis) to make Asterisk ignore the
; T38FaxMaxDatagram value specified by the other endpoint, and use a configured value instead.
; This can be done by appending 'maxdatagram=<value>' to the t38pt_udptl configuration option,
; like this:
;
; t38pt_udptl=yes,fec,maxdatagram=400 ; Enables T.38 with FEC error correction and overrides
;                                       ; the other endpoint's provided value to assume we can
;                                       ; send 400 byte T.38 FAX packets to it.
t38pt_udptl=<%= @sip_options["t38pt_udptl"] -%>
<% end -%>

<% if @sip_options.has_key?("faxdetect") -%>
; FAX detection will cause the SIP channel to jump to the 'fax' extension (if it exists)
; based one or more events being detected. The events that can be detected are an incoming
; CNG tone or an incoming T.38 re-INVITE request.
;
; faxdetect=yes		; Default 'no', 'yes' enables both CNG and T.38 detection
; faxdetect=cng		; Enables only CNG detection
; faxdetect=t38		; Enables only T.38 detection
; faxdetect=both		; Enables both CNG and T.38 detection (same as 'yes')
faxdetect=<%= @sip_options["faxdetect"] -%>
<% end -%>

<% if @sip_options.has_key?("mwi") -%>
; TODO: WMI is not jet implemented in this puppet asterisk module
;----------------------------------------- OUTBOUND MWI SUBSCRIPTIONS -------------------------
; Asterisk can subscribe to receive the MWI from another SIP server and store it locally for retrieval
; by other phones.
; Format for the mwi register statement is:
;       mwi=> user[:secret[:authuser]]@host[:port][/mailbox]
;
; Examples:
;mwi=> 1234:password@mysipprovider.com/1234
;
; MWI received will be stored in the 1234 mailbox of the SIP_Remote context. It can be used by other phones by following the below:
; mailbox=1234@SIP_Remote
<% end -%>

<% if @sip_options.has_key?("localnet") -%>
;----------------------------------------- NAT SUPPORT ------------------------
;
; WARNING: SIP operation behind a NAT is tricky and you really need
; to read and understand well the following section.
;
; When Asterisk is behind a NAT device, the "local" address (and port) that
; a socket is bound to has different values when seen from the inside or
; from the outside of the NATted network. Unfortunately this address must
; be communicated to the outside (e.g. in SIP and SDP messages), and in
; order to determine the correct value Asterisk needs to know:
;
; + whether it is talking to someone "inside" or "outside" of the NATted network.
;   This is configured by assigning the "localnet" parameter with a list
;   of network addresses that are considered "inside" of the NATted network.
;   IF LOCALNET IS NOT SET, THE EXTERNAL ADDRESS WILL NOT BE SET CORRECTLY.
;   Multiple entries are allowed, e.g. a reasonable set is the following:
;
;      localnet=192.168.0.0/255.255.0.0 ; RFC 1918 addresses
;      localnet=10.0.0.0/255.0.0.0      ; Also RFC1918
;      localnet=172.16.0.0/12           ; Another RFC1918 with CIDR notation
;      localnet=169.254.0.0/255.255.0.0 ; Zero conf local network
<%   @sip_options["localnet"].each do |x| -%>
localnet=<%= x %>
<%   end -%>
<% end -%>
<% if ( @sip_options.has_key?("externip") or  @sip_options.has_key?("externhost") or  @sip_options.has_key?("stunaddr") ) -%>
; + the "externally visible" address and port number to be used when talking
;   to a host outside the NAT. This information is derived by one of the
;   following (mutually exclusive) config file parameters:
<% end -%>
<% if @sip_options.has_key?("externip") -%>
;   a. "externip=hostname[:port]" specifies a static address[:port] to
;      be used in SIP and SDP messages.
;      The hostname is looked up only once, when [re]loading sip.conf .
;      If a port number is not present, use the "bindport" value (which is
;      not guaranteed to work correctly, because a NAT box might remap the
;      port number as well as the address).
;      This approach can be useful if you have a NAT device where you can
;      configure the mapping statically. Examples:
;
;        externip=12.34.56.78          ; use this address.
;        externip=12.34.56.78:9900     ; use this address and port.
;        externip=mynat.my.org:12600   ; Public address of my nat box.
externip=<%= @sip_options["externip"] -%>
<% end -%>
<% if @sip_options.has_key?("externhost") -%>
;   b. "externhost=hostname[:port]" is similar to "externip" except
;      that the hostname is looked up every "externrefresh" seconds
;      (default 10s). This can be useful when your NAT device lets you choose
;      the port mapping, but the IP address is dynamic.
;      Beware, you might suffer from service disruption when the name server
;      resolution fails. Examples:
;
;        externhost=foo.dyndns.net       ; refreshed periodically
;        externrefresh=180               ; change the refresh interval
externhost=<%= @sip_options["externhost"] -%>
<% end -%>
<% if @sip_options.has_key?("stunaddr") -%>
;   c. "stunaddr=stun.server[:port]" queries the STUN server specified
;      as an argument to obtain the external address/port.
;      Queries are also sent periodically every "externrefresh" seconds
;      (as a side effect, sending the query also acts as a keepalive for
;      the state entry on the nat box):
;
;        stunaddr=foo.stun.com:3478
;        externrefresh=15
stunaddr=<%= @sip_options["stunaddr"] -%>
;
;   Note that at the moment all these mechanism work only for the SIP socket.
;   The IP address discovered with externip/externhost/STUN is reused for
;   media sessions as well, but the port numbers are not remapped so you
;   may still experience problems.
;
; NOTE 1: in some cases, NAT boxes will use different port numbers in
; the internal<->external mapping. In these cases, the "externip" and
; "externhost" might not help you configure addresses properly, and you
; really need to use STUN.
;
; NOTE 2: when using "externip" or "externhost", the address part is
; also used as the external address for media sessions.
; If you use "stunaddr", STUN queries will be sent to the same server
; also from media sockets, and this should permit a correct mapping of
; the port numbers as well.
<% end -%>
<% if @sip_options.has_key?("externrefresh") -%>
externrefresh=<%= @sip_options["externrefresh"] -%>
<% end -%>
<% if @sip_options.has_key?("nat") -%>
;
; In addition to the above, Asterisk has an additional "nat" parameter to
; address NAT-related issues in incoming SIP or media sessions.
; In particular, depending on the 'nat= ' settings described below, Asterisk
; may override the address/port information specified in the SIP/SDP messages,
; and use the information (sender address) supplied by the network stack instead.
; However, this is only useful if the external traffic can reach us.
; The following settings are allowed (both globally and in individual sections):
;
;        nat=no                ; default. Use NAT mode only according to RFC3581 (;rport)
;        nat=yes               ; Always ignore info and assume NAT
;        nat=never             ; Never attempt NAT mode or RFC3581 support
;        nat=route             ; route=Assume NAT, don't send rport 
;                                ; (work around more UNIDEN bugs)
nat=<%= @sip_options["nat"] -%>
<% end -%>

<% if @sip_options.has_key?("directmedia") -%>
;----------------------------------- MEDIA HANDLING --------------------------------
; By default, Asterisk tries to re-invite media streams to an optimal path. If there's
; no reason for Asterisk to stay in the media path, the media will be redirected.
; This does not really work well in the case where Asterisk is outside and the
; clients are on the inside of a NAT. In that case, you want to set directmedia=nonat.
;
directmedia=<%= @sip_options["directmedia"] -%>                ; Asterisk by default tries to redirect the
                                ; RTP media stream to go directly from
                                ; the caller to the callee.  Some devices do not
                                ; support this (especially if one of them is behind a NAT).
                                ; The default setting is YES. If you have all clients
                                ; behind a NAT, or for some other reason want Asterisk to
                                ; stay in the audio path, you may want to turn this off.
                                ; This setting also affect direct RTP
                                ; at call setup (a new feature in 1.4 - setting up the
                                ; call directly between the endpoints instead of sending
                                ; a re-INVITE).
<% end -%>
<% if @sip_options.has_key?("directrtpsetup") -%>
directrtpsetup=<%= @sip_options["directrtpsetup"] -%>             ; Enable the new experimental direct RTP setup. This sets up
                                ; the call directly with media peer-2-peer without re-invites.
                                ; Will not work for video and cases where the callee sends 
                                ; RTP payloads and fmtp headers in the 200 OK that does not match the
                                ; callers INVITE. This will also fail if directmedia is enabled when
                                ; the device is actually behind NAT.

                                ; Additionally this option does not disable all reINVITE operations.
                                ; It only controls Asterisk generating reINVITEs for the specific
                                ; purpose of setting up a direct media path. If a reINVITE is
                                ; needed to switch a media stream to inactive (when placed on
                                ; hold) or to T.38, it will still be done, regardless of this 
                                ; setting. Note that direct T.38 is not supported.
<% end -%>
<% if @sip_options.has_key?("directmedia") -%>
directmedia=<%= @sip_options["directmedia"] -%>              ; An additional option is to allow media path redirection
                                ; (reinvite) but only when the peer where the media is being
                                ; sent is known to not be behind a NAT (as the RTP core can
                                ; determine it based on the apparent IP address the media
                                ; arrives from).
<% end -%>
<% if @sip_options.has_key?("directmedia") -%>
directmedia=<%= @sip_options["directmedia"] -%>             ; Yet a third option... use UPDATE for media path redirection,
                                ; instead of INVITE. This can be combined with 'nonat', as
                                ; 'directmedia=update,nonat'. It implies 'yes'.
<% end -%>
<% if @sip_options.has_key?("ignoresdpversion") -%>
ignoresdpversion=<%= @sip_options["ignoresdpversion"] -%>           ; By default, Asterisk will honor the session version
                                ; number in SDP packets and will only modify the SDP
                                ; session if the version number changes. This option will
                                ; force asterisk to ignore the SDP session version number
                                ; and treat all SDP data as new data.  This is required
                                ; for devices that send us non standard SDP packets
                                ; (observed with Microsoft OCS). By default this option is
                                ; off.
<% end -%>

<% if @sip_options.has_key?("rtcachefriends") -%>
;----------------------------------------- REALTIME SUPPORT ------------------------
; For additional information on ARA, the Asterisk Realtime Architecture,
; please read realtime.txt and extconfig.txt in the /doc directory of the
; source code.
;
rtcachefriends=<%= @sip_options["rtcachefriends"] -%>             ; Cache realtime friends by adding them to the internal list
                                ; just like friends added from the config file only on a
                                ; as-needed basis? (yes|no)
<% end -%>
<% if @sip_options.has_key?("rtsavesysname") -%>
rtsavesysname=<%= @sip_options["rtsavesysname"] -%>              ; Save systemname in realtime database at registration
                                ; Default= no
<% end -%>
<% if @sip_options.has_key?("rtupdate") -%>
rtupdate=<%= @sip_options["rtupdate"] -%>                   ; Send registry updates to database using realtime? (yes|no)
                                ; If set to yes, when a SIP UA registers successfully, the ip address,
                                ; the origination port, the registration period, and the username of
                                ; the UA will be set to database via realtime. 
                                ; If not present, defaults to 'yes'. Note: realtime peers will
                                ; probably not function across reloads in the way that you expect, if
                                ; you turn this option off.
<% end -%>
<% if @sip_options.has_key?("rtautoclear") -%>
rtautoclear=<%= @sip_options["rtautoclear"] -%>                ; Auto-Expire friends created on the fly on the same schedule
                                ; as if it had just registered? (yes|no|<seconds>)
                                ; If set to yes, when the registration expires, the friend will
                                ; vanish from the configuration until requested again. If set
                                ; to an integer, friends expire within this number of seconds
                                ; instead of the registration interval.
<% end -%>
<% if @sip_options.has_key?("ignoreregexpire") -%>
ignoreregexpire=<%= @sip_options["ignoreregexpire"] -%>            ; Enabling this setting has two functions:
                                ;
                                ; For non-realtime peers, when their registration expires, the
                                ; information will _not_ be removed from memory or the Asterisk database
                                ; if you attempt to place a call to the peer, the existing information
                                ; will be used in spite of it having expired
                                ;
                                ; For realtime peers, when the peer is retrieved from realtime storage,
                                ; the registration information will be used regardless of whether
                                ; it has expired or not; if it expires while the realtime peer 
                                ; is still in memory (due to caching or other reasons), the 
                                ; information will not be removed from realtime storage
<% end -%>

<% if @sip_options.has_key?("domain") -%>
;----------------------------------------- SIP DOMAIN SUPPORT ------------------------
; Incoming INVITE and REFER messages can be matched against a list of 'allowed'
; domains, each of which can direct the call to a specific context if desired.
; By default, all domains are accepted and sent to the default context or the
; context associated with the user/peer placing the call.
; REGISTER to non-local domains will be automatically denied if a domain
; list is configured.
;
; Domains can be specified using:
; domain=<domain>[,<context>]
; Examples:
; domain=myasterisk.dom
; domain=customer.com,customer-context
;
; In addition, all the 'default' domains associated with a server should be
; added if incoming request filtering is desired.
; autodomain=yes
;
; To disallow requests for domains not serviced by this server:
; allowexternaldomains=no
;domain=mydomain.tld,mydomain-incoming
                                ; Add domain and configure incoming context
                                ; for external calls to this domain
;domain=1.2.3.4                 ; Add IP address as local domain
                                ; You can have several "domain" settings
<% end -%>
<% if @sip_options.has_key?("domain") -%>
<%   @sip_options["domain"].each do |x| -%>
domain=<%= x %>
<%   end -%>
<% end -%>
<% if @sip_options.has_key?("allowexternaldomains") -%>
allowexternaldomains=<%= @sip_options["allowexternaldomains"] -%>         ; Disable INVITE and REFER to non-local domains
                                ; Default is yes
<% end -%>
<% if @sip_options.has_key?("autodomain") -%>
autodomain=<%= @sip_options["autodomain"] -%>                  ; Turn this on to have Asterisk add local host
                                ; name and local IP to domain list.
<% end -%>
<% if @sip_options.has_key?("fromdomain") -%>
fromdomain=<%= @sip_options["fromdomain"] -%>        ; When making outbound SIP INVITEs to
                                ; non-peers, use your primary domain "identity"
                                ; for From: headers instead of just your IP
                                ; address. This is to be polite and
                                ; it may be a mandatory requirement for some
                                ; destinations which do not have a prior
                                ; account relationship with your server. 
<% end -%>

<% if @sip_options.has_key?("jbenable") -%>
;------------------------------ JITTER BUFFER CONFIGURATION --------------------------
jbenable=<%= @sip_options["jbenable"] -%>               ; Enables the use of a jitterbuffer on the receiving side of a
                              ; SIP channel. Defaults to "no". An enabled jitterbuffer will
                              ; be used only if the sending side can create and the receiving
                              ; side can not accept jitter. The SIP channel can accept jitter,
                              ; thus a jitterbuffer on the receive SIP side will be used only
                              ; if it is forced and enabled.
<% end -%>
<% if @sip_options.has_key?("jbforce") -%>
jbforce=<%= @sip_options["jbforce"] -%>                 ; Forces the use of a jitterbuffer on the receive side of a SIP
                              ; channel. Defaults to "no".
<% end -%>
<% if @sip_options.has_key?("jbmaxsize") -%>
jbmaxsize=<%= @sip_options["jbmaxsize"] -%>              ; Max length of the jitterbuffer in milliseconds.
<% end -%>
<% if @sip_options.has_key?("jbresyncthreshold") -%>
jbresyncthreshold=<%= @sip_options["jbresyncthreshold"] -%>     ; Jump in the frame timestamps over which the jitterbuffer is
                              ; resynchronized. Useful to improve the quality of the voice, with
                              ; big jumps in/broken timestamps, usually sent from exotic devices
                              ; and programs. Defaults to 1000.
<% end -%>
<% if @sip_options.has_key?("jbimpl") -%>
jbimpl=<%= @sip_options["jbimpl"] -%>               ; Jitterbuffer implementation, used on the receiving side of a SIP
                              ; channel. Two implementations are currently available - "fixed"
                              ; (with size always equals to jbmaxsize) and "adaptive" (with
                              ; variable size, actually the new jb of iax2). Defaults to fixed.
<% end -%>
<% if @sip_options.has_key?("jbtargetextra") -%>
jbtargetextra=<%= @sip_options["jbtargetextra"] -%>           ; This option only affects the jb when 'jbimpl=adaptive' is set.
                              ; The option represents the number of milliseconds by which the new jitter buffer
                              ; will pad its size. the default is 40, so without modification, the new
                              ; jitter buffer will set its size to the jitter value plus 40 milliseconds.
                              ; increasing this value may help if your network normally has low jitter,
                              ; but occasionally has spikes.
<% end -%>
<% if @sip_options.has_key?("jblog") -%>
jblog=<%= @sip_options["jblog"] -%>                   ; Enables jitterbuffer frame logging. Defaults to "no".
<% end -%>

<% if @sip_options.has_key?("register") -%>
;----------------------------------------- OUTBOUND SIP REGISTRATIONS  ------------------------
; Asterisk can register as a SIP user agent to a SIP proxy (provider)
; Format for the register statement is:
;       register=> [peer?][transport://]user[@domain][:secret[:authuser]]@host[:port][/extension][~expiry]
;
; 
;
; domain is either 
;	- domain in DNS
; 	- host name in DNS
;	- the name of a peer defined below or in realtime
; The domain is where you register your username, so your SIP uri you are registering to 
; is username@domain
;
; If no extension is given, the 's' extension is used. The extension needs to
; be defined in extensions.conf to be able to accept calls from this SIP proxy
; (provider).
;
; A similar effect can be achieved by adding a "callbackextension" option in a peer section.
; this is equivalent to having the following line in the general section:
;
;        register=> username:secret@host/callbackextension
;
; and more readable because you don't have to write the parameters in two places
; (note that the "port" is ignored - this is a bug that should be fixed).
;
; Note that a register= line doesn't mean that we will match the incoming call in any
; other way than described above. If you want to control where the call enters your
; dialplan, which context, you want to define a peer with the hostname of the provider's
; server. If the provider has multiple servers to place calls to your system, you need
; a peer for each server.
;
; Beginning with Asterisk version 1.6.2, the "user" portion of the register line may
; contain a port number. Since the logical separator between a host and port number is a
; ':' character, and this character is already used to separate between the optional "secret"
; and "authuser" portions of the line, there is a bit of a hoop to jump through if you wish
; to use a port here. That is, you must explicitly provide a "secret" and "authuser" even if
; they are blank. See the third example below for an illustration.
;
;
; Examples:
;
;register=> 1234:password@mysipprovider.com        
;
;     This will pass incoming calls to the 's' extension
;
;
;register=> 2345:password@sip_proxy/1234
;
;    Register 2345 at sip provider 'sip_proxy'.  Calls from this provider
;    connect to local extension 1234 in extensions.conf, default context,
;    unless you configure a [sip_proxy] section below, and configure a
;    context.
;    Tip 1: Avoid assigning hostname to a sip.conf section like [provider.com]
;    Tip 2: Use separate inbound and outbound sections for SIP providers
;           (instead of type=friend) if you have calls in both directions
;
;register=> 3456@mydomain:5082::@mysipprovider.com
;
;    Note that in this example, the optional authuser and secret portions have
;    been left blank because we have specified a port in the user section
;
;register=> tls://username:xxxxxx@sip-tls-proxy.example.org
;
;    The 'transport' part defaults to 'udp' but may also be 'tcp' or 'tls'.
;    Using 'udp://' explicitly is also useful in case the username part
;    contains a '/' ('user/name').
<% end -%>
<% if @sip_options.has_key?("registertimeout") -%>
registertimeout=<%= @sip_options["registertimeout"] -%>              ; retry registration calls every 20 seconds (default)
<% end -%>
<% if @sip_options.has_key?("registerattempts") -%>
registerattempts=<%= @sip_options["registerattempts"] -%>             ; Number of registration attempts before we give up
                                ; 0=continue forever, hammering the other server
                                ; until it accepts the registration
                                ; Default is 0 tries, continue forever
<% end -%>

#include </etc/asterisk/sip.registry.d/*.conf>
#include </etc/asterisk/sip.conf.d/*.conf>
